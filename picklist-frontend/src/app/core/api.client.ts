/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createODLN(body: ODLNViewModel | undefined): Observable<ResultResponse> {
        let url_ = this.baseUrl + "/api/controller/createODLN";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateODLN(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateODLN(<any>response_);
                } catch (e) {
                    return <Observable<ResultResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateODLN(response: HttpResponseBase): Observable<ResultResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getOpenSalesOrder(): Observable<OpenSalesOrder[]> {
        let url_ = this.baseUrl + "/api/controller/getOpenSalesOrder";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOpenSalesOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOpenSalesOrder(<any>response_);
                } catch (e) {
                    return <Observable<OpenSalesOrder[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OpenSalesOrder[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetOpenSalesOrder(response: HttpResponseBase): Observable<OpenSalesOrder[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OpenSalesOrder.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OpenSalesOrder[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createOPKL(body: OpenSalesOrder[] | undefined): Observable<ResultResponse> {
        let url_ = this.baseUrl + "/api/controller/createOPKL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOPKL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOPKL(<any>response_);
                } catch (e) {
                    return <Observable<ResultResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOPKL(response: HttpResponseBase): Observable<ResultResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createOWTR(body: OWTRViewModel | undefined): Observable<ResultResponse> {
        let url_ = this.baseUrl + "/api/controller/createOWTR";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOWTR(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOWTR(<any>response_);
                } catch (e) {
                    return <Observable<ResultResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOWTR(response: HttpResponseBase): Observable<ResultResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultResponse>(<any>null);
    }
}

export class ODLNContentViewModel implements IODLNContentViewModel {
    itemCode?: string | undefined;
    quantity?: number;
    baseEntry?: number;
    baseLine?: number;
    baseType?: number;

    constructor(data?: IODLNContentViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.quantity = data["quantity"];
            this.baseEntry = data["baseEntry"];
            this.baseLine = data["baseLine"];
            this.baseType = data["baseType"];
        }
    }

    static fromJS(data: any): ODLNContentViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ODLNContentViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["quantity"] = this.quantity;
        data["baseEntry"] = this.baseEntry;
        data["baseLine"] = this.baseLine;
        data["baseType"] = this.baseType;
        return data; 
    }
}

export interface IODLNContentViewModel {
    itemCode?: string | undefined;
    quantity?: number;
    baseEntry?: number;
    baseLine?: number;
    baseType?: number;
}

export class ODLNViewModel implements IODLNViewModel {
    cardCode?: string | undefined;
    comments?: string | undefined;
    odlnContent?: ODLNContentViewModel[] | undefined;

    constructor(data?: IODLNViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cardCode = data["cardCode"];
            this.comments = data["comments"];
            if (Array.isArray(data["odlnContent"])) {
                this.odlnContent = [] as any;
                for (let item of data["odlnContent"])
                    this.odlnContent.push(ODLNContentViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ODLNViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ODLNViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardCode"] = this.cardCode;
        data["comments"] = this.comments;
        if (Array.isArray(this.odlnContent)) {
            data["odlnContent"] = [];
            for (let item of this.odlnContent)
                data["odlnContent"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IODLNViewModel {
    cardCode?: string | undefined;
    comments?: string | undefined;
    odlnContent?: ODLNContentViewModel[] | undefined;
}

export class ResultResponse implements IResultResponse {
    result?: string | undefined;
    message?: string | undefined;
    resultData?: any | undefined;

    constructor(data?: IResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"];
            this.message = data["message"];
            this.resultData = data["resultData"];
        }
    }

    static fromJS(data: any): ResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["message"] = this.message;
        data["resultData"] = this.resultData;
        return data; 
    }
}

export interface IResultResponse {
    result?: string | undefined;
    message?: string | undefined;
    resultData?: any | undefined;
}

export class OpenSalesOrder implements IOpenSalesOrder {
    docNum?: number;
    docDate?: Date;
    soType?: string | undefined;
    cardCode?: string | undefined;
    cardName?: string | undefined;
    whseBranch?: string | undefined;
    itemCode?: string | undefined;
    dscription?: string | undefined;
    quantity?: number;
    qtyToPost?: number;
    whsCode?: string | undefined;
    branch?: string | undefined;
    docEntry?: number;
    lineNum?: number;
    objType?: string | undefined;

    constructor(data?: IOpenSalesOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.docNum = data["docNum"];
            this.docDate = data["docDate"] ? new Date(data["docDate"].toString()) : <any>undefined;
            this.soType = data["soType"];
            this.cardCode = data["cardCode"];
            this.cardName = data["cardName"];
            this.whseBranch = data["whseBranch"];
            this.itemCode = data["itemCode"];
            this.dscription = data["dscription"];
            this.quantity = data["quantity"];
            this.qtyToPost = data["qtyToPost"];
            this.whsCode = data["whsCode"];
            this.branch = data["branch"];
            this.docEntry = data["docEntry"];
            this.lineNum = data["lineNum"];
            this.objType = data["objType"];
        }
    }

    static fromJS(data: any): OpenSalesOrder {
        data = typeof data === 'object' ? data : {};
        let result = new OpenSalesOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docNum"] = this.docNum;
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["soType"] = this.soType;
        data["cardCode"] = this.cardCode;
        data["cardName"] = this.cardName;
        data["whseBranch"] = this.whseBranch;
        data["itemCode"] = this.itemCode;
        data["dscription"] = this.dscription;
        data["quantity"] = this.quantity;
        data["qtyToPost"] = this.qtyToPost;
        data["whsCode"] = this.whsCode;
        data["branch"] = this.branch;
        data["docEntry"] = this.docEntry;
        data["lineNum"] = this.lineNum;
        data["objType"] = this.objType;
        return data; 
    }
}

export interface IOpenSalesOrder {
    docNum?: number;
    docDate?: Date;
    soType?: string | undefined;
    cardCode?: string | undefined;
    cardName?: string | undefined;
    whseBranch?: string | undefined;
    itemCode?: string | undefined;
    dscription?: string | undefined;
    quantity?: number;
    qtyToPost?: number;
    whsCode?: string | undefined;
    branch?: string | undefined;
    docEntry?: number;
    lineNum?: number;
    objType?: string | undefined;
}

export class OWTRContentViewModel implements IOWTRContentViewModel {
    itemCode?: string | undefined;
    quantity?: number;

    constructor(data?: IOWTRContentViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): OWTRContentViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new OWTRContentViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IOWTRContentViewModel {
    itemCode?: string | undefined;
    quantity?: number;
}

export class OWTRViewModel implements IOWTRViewModel {
    cardCode?: string | undefined;
    series?: number;
    fromWarehouse?: string | undefined;
    toWarehouse?: string | undefined;
    itType?: string | undefined;
    comments?: string | undefined;
    owtrContent?: OWTRContentViewModel[] | undefined;

    constructor(data?: IOWTRViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cardCode = data["cardCode"];
            this.series = data["series"];
            this.fromWarehouse = data["fromWarehouse"];
            this.toWarehouse = data["toWarehouse"];
            this.itType = data["itType"];
            this.comments = data["comments"];
            if (Array.isArray(data["owtrContent"])) {
                this.owtrContent = [] as any;
                for (let item of data["owtrContent"])
                    this.owtrContent.push(OWTRContentViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OWTRViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new OWTRViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardCode"] = this.cardCode;
        data["series"] = this.series;
        data["fromWarehouse"] = this.fromWarehouse;
        data["toWarehouse"] = this.toWarehouse;
        data["itType"] = this.itType;
        data["comments"] = this.comments;
        if (Array.isArray(this.owtrContent)) {
            data["owtrContent"] = [];
            for (let item of this.owtrContent)
                data["owtrContent"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOWTRViewModel {
    cardCode?: string | undefined;
    series?: number;
    fromWarehouse?: string | undefined;
    toWarehouse?: string | undefined;
    itType?: string | undefined;
    comments?: string | undefined;
    owtrContent?: OWTRContentViewModel[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}